package pixelitor.filters.truchets;

import pixelitor.utils.Utils;

import java.awt.Point;
import java.util.stream.Stream;

public enum TruchetPreconfiguredPattern implements TruchetPattern {
    Citrine(new int[][]{
        {2, 2, 1, 1, 2, 2, 3, 3, 0, 0, 3, 3},
        {0, 0, 3, 3, 0, 0, 1, 1, 2, 2, 1, 1}}),
    Diamond(new int[][]{
        {0, 1, 2, 3},
        {1, 0, 3, 2},
        {2, 3, 0, 1},
        {3, 2, 1, 0}}),
    Emerald(new int[][]{
        {0, 0, 1, 1, 2, 2, 3, 3},
        {0, 0, 1, 1, 2, 2, 3, 3},
        {1, 1, 0, 0, 3, 3, 2, 2},
        {1, 1, 0, 0, 3, 3, 2, 2}}),
    Friedelite(new int[][]{
        {2, 3, 2, 3, 0, 1, 0, 1},
        {1, 3, 2, 0, 3, 3, 2, 2},
        {2, 0, 1, 3, 0, 0, 1, 1},
        {1, 0, 1, 0, 3, 2, 3, 2},
        {0, 1, 0, 1, 2, 3, 2, 3},
        {3, 3, 2, 2, 1, 3, 2, 0},
        {0, 0, 1, 1, 2, 0, 1, 3},
        {3, 2, 3, 2, 1, 0, 1, 0}}),
    Garnet(new int[][]{
        {0, 1, 1, 0, 0, 1},
        {3, 3, 2, 3, 2, 2},
        {0, 0, 1, 0, 1, 1},
        {3, 2, 2, 3, 3, 2}}),
    Hambergite(new int[][]{
        {0, 2, 3},
        {3, 2, 0},
        {2, 0, 1},
        {1, 0, 2}}),
    Iolite(new int[][]{
        {0, 2, 3, 1},
        {1, 0, 2, 3},
        {3, 1, 0, 2},
        {2, 3, 1, 0}}),
    Jade(new int[][]{
        {2, 1, 3, 1, 0, 1, 3, 1},
        {1, 3, 1, 0, 1, 3, 1, 2},
        {3, 1, 0, 1, 3, 1, 2, 1},
        {1, 0, 1, 3, 1, 2, 1, 3},
        {0, 1, 3, 1, 2, 1, 3, 1},
        {1, 3, 1, 2, 1, 3, 1, 0},
        {3, 1, 2, 1, 3, 1, 0, 1},
        {1, 2, 1, 3, 1, 0, 1, 3}}),
    Kyanite(new int[][]{
        {0, 2, 2, 3, 2, 0},
        {2, 2, 0, 0, 1, 0},
        {2, 0, 0, 2, 2, 3},
        {1, 0, 2, 2, 0, 0},
        {2, 3, 2, 0, 0, 2},
        {0, 0, 1, 0, 2, 2}}),
    Lapis(new int[][]{
        {3, 2, 3, 2, 1, 0, 1, 0},
        {0, 2, 3, 1, 2, 0, 1, 3},
        {3, 1, 0, 2, 1, 3, 2, 0},
        {0, 1, 0, 1, 2, 3, 2, 3},
        {1, 0, 1, 0, 3, 2, 3, 2},
        {2, 0, 1, 3, 0, 2, 3, 1},
        {1, 3, 2, 0, 3, 1, 0, 2},
        {2, 3, 2, 3, 0, 1, 0, 1}}),
    Moonstone(new int[][]{
        {0, 2, 3, 1, 2, 0, 1, 3},
        {0, 1, 0, 1, 2, 3, 2, 3},
        {3, 2, 3, 2, 1, 0, 1, 0},
        {0, 2, 3, 1, 2, 0, 1, 3},
        {0, 1, 0, 1, 2, 3, 2, 3},
        {3, 2, 3, 2, 1, 0, 1, 0}}),
    Neptunite(new int[][]{
        {2, 2, 3, 3, 0, 0, 1, 1},
        {1, 1, 0, 0, 3, 3, 2, 2},
        {2, 0, 1, 3, 0, 2, 3, 1},
        {1, 3, 2, 0, 3, 1, 0, 2}}),
    Opal(new int[][]{
        {0, 2, 1, 0, 3, 1, 2, 0, 3, 2, 1, 3},
        {2, 0, 3, 2, 1, 3, 0, 2, 1, 0, 3, 1},
        {3, 1, 0, 1, 0, 2, 1, 3, 2, 3, 2, 0},
        {0, 2, 3, 2, 3, 1, 2, 0, 1, 0, 1, 3},
        {1, 3, 0, 1, 2, 0, 3, 1, 2, 3, 0, 2},
        {3, 1, 2, 3, 0, 2, 1, 3, 0, 1, 2, 0},
        {2, 0, 3, 2, 1, 3, 0, 2, 1, 0, 3, 1},
        {0, 2, 1, 0, 3, 1, 2, 0, 3, 2, 1, 3},
        {1, 3, 2, 3, 2, 0, 3, 1, 0, 1, 0, 2},
        {2, 0, 1, 0, 1, 3, 0, 2, 3, 2, 3, 1},
        {3, 1, 2, 3, 0, 2, 1, 3, 0, 1, 2, 0},
        {1, 3, 0, 1, 2, 0, 3, 1, 2, 3, 0, 2}}),
    Pearl(new int[][]{
        {0, 1, 3, 1, 3, 2, 0, 2},
        {3, 2, 0, 2, 0, 1, 3, 1},
        {1, 0, 2, 0, 2, 3, 1, 3},
        {3, 2, 0, 2, 0, 1, 3, 1},
        {1, 0, 2, 0, 2, 3, 1, 3},
        {2, 3, 1, 3, 1, 0, 2, 0},
        {0, 1, 3, 1, 3, 2, 0, 2},
        {2, 3, 1, 3, 1, 0, 2, 0}}),
    Quartz(new int[][]{
        {0, 0, 0, 2, 0, 1, 3, 1, 1, 1},
        {0, 0, 2, 0, 2, 3, 1, 3, 1, 1},
        {0, 2, 0, 2, 0, 1, 3, 1, 3, 1},
        {2, 0, 2, 0, 0, 1, 1, 3, 1, 3},
        {0, 2, 0, 0, 2, 3, 1, 1, 3, 1},
        {3, 1, 3, 3, 1, 0, 2, 2, 0, 2},
        {1, 3, 1, 3, 3, 2, 2, 0, 2, 0},
        {3, 1, 3, 1, 3, 2, 0, 2, 0, 2},
        {3, 3, 1, 3, 1, 0, 2, 0, 2, 2},
        {3, 3, 3, 1, 3, 2, 0, 2, 2, 2}}),
    Ruby(new int[][]{
        {0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3},
        {3, 2, 2, 3, 3, 2, 1, 0, 0, 1, 1, 0},
        {0, 2, 0, 1, 3, 1, 2, 0, 2, 3, 1, 3},
        {3, 1, 3, 2, 0, 2, 1, 3, 1, 0, 2, 0},
        {0, 1, 1, 0, 0, 1, 2, 3, 3, 2, 2, 3},
        {3, 2, 3, 2, 3, 2, 1, 0, 1, 0, 1, 0},
        {2, 3, 2, 3, 2, 3, 0, 1, 0, 1, 0, 1},
        {1, 0, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2},
        {2, 0, 2, 3, 1, 3, 0, 2, 0, 1, 3, 1},
        {1, 3, 1, 0, 2, 0, 3, 1, 3, 2, 0, 2},
        {2, 3, 3, 2, 2, 3, 0, 1, 1, 0, 0, 1},
        {1, 0, 1, 0, 1, 0, 3, 2, 3, 2, 3, 2}}),
    Sapphire(new int[][]{
        {0, 2, 0, 2, 0, 1, 3, 1},
        {0, 1, 3, 1, 0, 2, 0, 2},
        {2, 3, 1, 3, 2, 0, 2, 0},
        {2, 0, 2, 0, 2, 3, 1, 3}}),
    Vivianite(new int[][]{
        {0, 2, 4, 4},
        {2, 0, 4, 4},
        {5, 5, 2, 0},
        {5, 5, 0, 2}}),
    Wavellite(new int[][]{
        {4, 3},
        {1, 5},}),
    Xonotlite(new int[][]{
        {4, 0, 4, 5, 3, 5},
        {3, 5, 1, 2, 4, 0},
        {4, 2, 4, 5, 1, 5},
        {5, 3, 5, 4, 0, 4},
        {2, 4, 0, 3, 5, 1},
        {5, 1, 5, 4, 2, 4},}),
    Yugawaralite(new int[][]{
        {5, 4, 3},
        {3, 5, 4},
        {4, 3, 5},}),
    Zincite(new int[][]{
        {2, 4, 3},
        {0, 1, 4},
        {3, 2, 4},
        {1, 4, 0},}),
    Amethyst(new int[][]{
        {5, 4},
        {3, 1},
        {4, 5},
        {0, 2},}),
    ;

    private final int[][] pattern;
    private int degree;
    private final int rows;
    private final int columns;

    TruchetPreconfiguredPattern(int[][] pattern) {
        this.pattern = pattern;
        this.rows = pattern.length;
        this.columns = pattern[0].length;
        for (int[] row : pattern) {
            for (int r : row) {
                degree = Math.max(degree, r);
            }
        }
        degree++;
    }

    @Override
    public String toString() {
        return Utils.screamingSnakeCaseToSentenceCase(super.toString());
    }

    @Override
    public int getRows() {
        return rows;
    }

    @Override
    public int getColumns() {
        return columns;
    }

    @Override
    public int getState(int row, int column) {
        return pattern[row][column];
    }

    @Override
    public Stream<Point> streamHighlightRule(int mouseX, int mouseY) {
        return Stream.of();
    }
}
